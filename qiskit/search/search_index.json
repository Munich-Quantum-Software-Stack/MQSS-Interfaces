{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MQSS Qiskit Adapter Documentation","text":"<p>This is the documentation for the MQSS Qiskit Adapter.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with the MQSS Qiskit Adapter, refer to the Getting Started guide.</p>"},{"location":"#development-guide","title":"Development Guide","text":"<p>For information on setting up the development environment and contributing to the project, refer to the Development Guide.</p>"},{"location":"#api-documentation","title":"API Documentation","text":"<p>Detailed API documentation for the MQSS Qiskit Adapter:</p> <ul> <li>MQSSQiskitAdapter: The main entry point for accessing MQSS backends.</li> <li>MQSSQiskitBackend: Interfaces with the MQSS backends.</li> <li>MQSSQiskitJob: Manages job execution and results retrieval.</li> </ul>"},{"location":"#change-log","title":"Change Log","text":"<p>See the CHANGELOG for details on changes in each version.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#version-020","title":"Version 0.2.0","text":"<ul> <li>Rebrand as MQSS Qiskit Adapter and use MQSS Client</li> <li>Enable HPCQC workflow by using it in the HPC environment</li> <li>Make <code>qasm3</code> as default circuit format for communication</li> </ul>"},{"location":"contact/","title":"Contact Us","text":"<p>If you encounter any bugs or issues, please let us know by opening a new issue.</p>"},{"location":"api/mqss_adapter/","title":"MQSSQiskitAdapter","text":"<p>MQSSQiskitAdapter allows users to access MQSS Qiskit backends.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>MQP token</p> required <code>hpcqc</code> <code>bool</code> <p>Enable offloading task directly from HPC node to MQSS backend</p> <code>None</code> <code>base_url</code> <code>str</code> <p>MQSS endpoint</p> <code>None</code>"},{"location":"api/mqss_adapter/#mqss.qiskit_adapter.MQSSQiskitAdapter.backends","title":"backends","text":"<pre><code>backends(\n    *,\n    name: Optional[str] = None,\n    online: bool = False,\n    **kwargs,\n) -&gt; List[MQSSQiskitBackend]\n</code></pre> <p>Return a list of all available backends</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>name of the backend to return</p> <code>None</code> <code>online</code> <code>bool</code> <p>return only online backends</p> <code>False</code> <p>Returns:</p> Type Description <code>List[MQSSQiskitBackend]</code> <p>List[MQSSQiskitBackend]: List of backend instances</p>"},{"location":"api/mqss_adapter/#mqss.qiskit_adapter.MQSSQiskitAdapter.get_backend","title":"get_backend","text":"<pre><code>get_backend(\n    name: Optional[str] = None, **kwargs\n) -&gt; MQSSQiskitBackend\n</code></pre> <p>Return a backend by name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>name of the backend</p> <code>None</code> <p>Returns:</p> Type Description <code>MQSSQiskitBackend</code> <p>A backend instance</p>"},{"location":"api/mqss_backend/","title":"MQSSQiskitBackend","text":"<p>               Bases: <code>BackendV2</code></p> <p>MQSS Qiskit Backend class: This class extends Qiskit's BackendV2 class and provides methods to compile and run circuits on the backend. Users do not need to create an instance of this class directly; it is created and returned by the MQSSQiskitAdapter when a backend is requested.</p>"},{"location":"api/mqss_backend/#mqss.qiskit_adapter.backend.MQSSQiskitBackend.coupling_map","title":"coupling_map  <code>property</code>","text":"<pre><code>coupling_map: CouplingMap\n</code></pre> <p>Return the CouplingMap for the backend</p> <p>Returns:</p> Type Description <code>CouplingMap</code> <p>Coupling map for the backend</p>"},{"location":"api/mqss_backend/#mqss.qiskit_adapter.backend.MQSSQiskitBackend.num_pending_jobs","title":"num_pending_jobs  <code>property</code>","text":"<pre><code>num_pending_jobs: int\n</code></pre> <p>Returns the number of jobs waiting to be scheduled on the backend</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of pending jobs</p>"},{"location":"api/mqss_backend/#mqss.qiskit_adapter.backend.MQSSQiskitBackend.target","title":"target  <code>property</code>","text":"<pre><code>target: Target\n</code></pre> <p>Return the Target for the backend</p> <p>Returns:</p> Type Description <code>Target</code> <p>Target for the backend</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Target for the backend is not available/implemented</p>"},{"location":"api/mqss_backend/#mqss.qiskit_adapter.backend.MQSSQiskitBackend.run","title":"run","text":"<pre><code>run(\n    run_input: Union[QuantumCircuit, List[QuantumCircuit]],\n    shots: int = 1024,\n    *,\n    no_modify: bool = False,\n    qasm3: bool = True,\n    queued: bool = False,\n    **options,\n) -&gt; MQSSQiskitJob\n</code></pre> <p>Submit a circuit/batch of circuits to the backend</p> <p>Parameters:</p> Name Type Description Default <code>run_input</code> <code>Union[QuantumCircuit, List[QuantumCircuit]]</code> <p>quantum circuit(s) to run</p> required <code>shots</code> <code>int</code> <p>number of shots</p> <code>1024</code> <code>no_modify</code> <code>bool</code> <p>do not modify/transpile the circuit</p> <code>False</code> <code>qasm3</code> <code>bool</code> <p>use QASM3 format to send the circuit</p> <code>True</code> <code>queued</code> <code>bool</code> <p>enqueue (for limited time) the job while backend is offline</p> <code>False</code> <p>Returns:</p> Type Description <code>MQSSQiskitJob</code> <p>An instance of MQSSQiskitJob</p>"},{"location":"api/mqss_job/","title":"MQSSQiskitJob","text":"<p>               Bases: <code>JobV1</code></p> <p>MQSSQiskitJob Class: This class is used to manage jobs. Users do not need to create an instance of this class directly; it is created and returned by the MQSSQiskitBackend when a job is submitted via MQSSQiskitBackend.run.</p>"},{"location":"api/mqss_job/#mqss.qiskit_adapter.job.MQSSQiskitJob.cancel","title":"cancel","text":"<pre><code>cancel()\n</code></pre> <p>Cancel the job</p>"},{"location":"api/mqss_job/#mqss.qiskit_adapter.job.MQSSQiskitJob.result","title":"result","text":"<pre><code>result() -&gt; Result\n</code></pre> <p>Return the result for the job</p> <p>Returns:</p> Type Description <code>Result</code> <p>Result</p> <code>Result</code> <p>object for the job.</p>"},{"location":"api/mqss_job/#mqss.qiskit_adapter.job.MQSSQiskitJob.status","title":"status","text":"<pre><code>status() -&gt; JobStatus\n</code></pre> <p>Return the job's current status</p> <p>Returns:</p> Type Description <code>JobStatus</code> <p>The status of the job.</p> <code>JobStatus</code> <p>(JobStatus).</p>"},{"location":"user_guide/development_guide/","title":"Development Guide","text":""},{"location":"user_guide/development_guide/#project-overview","title":"Project Overview","text":"<p>This project provides a Qiskit adapter for MQSS, allowing users to access MQSS backends through Qiskit. The main components of the project are:</p> <ul> <li><code>adapter.py</code>: Contains the <code>MQSSQiskitAdapter</code> class, which serves as   the main entry point for accessing MQSS backends.</li> <li><code>backend.py</code>: Contains the <code>MQSSQiskitBackend</code> class, which interfaces   with the MQSS backends.</li> <li><code>job.py</code>: Contains the <code>MQSSQiskitJob</code> class, which handles job   cancellation, status checking, and result retrieval.</li> <li><code>mqss_resource.py</code>: Contains functions to retrieve the coupling map and target for the MQSS   backend.</li> </ul>"},{"location":"user_guide/development_guide/#prerequisites","title":"Prerequisites","text":"<p>Before you start developing, ensure you have the following installed:</p> <ul> <li>Python 3.9 to 3.13</li> <li><code>uv</code> package manager for python</li> </ul>"},{"location":"user_guide/development_guide/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<p>Clone the repository:</p> <pre><code>git clone https://github.com/Munich-Quantum-Software-Stack/MQSS-Qiskit-Adapter.git\ncd MQSS-Qiskit-Adapter\n</code></pre> <p>Create a virtual environment and install the dependencies:</p> <pre><code>uv sync\n</code></pre>"},{"location":"user_guide/development_guide/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>uv run pytest\n</code></pre>"},{"location":"user_guide/development_guide/#building-documentation","title":"Building Documentation","text":"<p>To build the documentation, follow these steps:</p> <p>Install MkDocs and the Material theme:</p> <pre><code>uv sync\n</code></pre> <p>Build the documentation:</p> <pre><code>uv run mkdocs build\n</code></pre> <p>Local deployment</p> <p>Run the following and browse the documentation locally at: http://localhost:8000</p> <pre><code>uv run mkdocs serve\n</code></pre>"},{"location":"user_guide/getting_started/","title":"Getting Started","text":""},{"location":"user_guide/getting_started/#installation","title":"Installation","text":"<p>To install the MQSS Qiskit adapter, use the following command:</p> <pre><code>pip install mqss-qiskit\n</code></pre>"},{"location":"user_guide/getting_started/#overview","title":"Overview","text":"<p>The Qiskit adapter for MQSS allows users to access MQSS backends through Qiskit. The main components are:</p> <ul> <li><code>MQSSQiskitAdapter</code>: This is the main entry point for accessing MQSS   backends.</li> <li><code>MQSSQiskitBackend</code>: It interfaces with the MQSS backends.</li> <li><code>MQSSQiskitJob</code>: It handles job submission, cancellation, status checking,   and result retrieval.</li> </ul>"},{"location":"user_guide/getting_started/#usage","title":"Usage","text":""},{"location":"user_guide/getting_started/#import-required-modules","title":"Import Required Modules","text":"<p>Import the necessary components from Qiskit and the MQSS adapter package.</p> <pre><code>from qiskit import QuantumCircuit\nfrom mqss.qiskit_adapter import MQSSQiskitAdapter\n</code></pre>"},{"location":"user_guide/getting_started/#initialize-the-mqss-qiskit-adapter","title":"Initialize the MQSS Qiskit Adapter","text":"<p>Create an instance of <code>MQSSQiskitAdapter</code> by supplying your token from MQP.</p> <pre><code>adapter = MQSSQiskitAdapter(token=\"&lt;api-token&gt;\")\n</code></pre>"},{"location":"user_guide/getting_started/#list-available-backends","title":"List Available Backends","text":"<p>Retrieve and inspect the list of backends accessible to your account.</p> <pre><code>all_backends = adapter.backends()\nprint(\"Available backends:\", all_backends)\n</code></pre>"},{"location":"user_guide/getting_started/#list-online-backends","title":"List Online Backends","text":"<p>Retrieve and inspect the list of backends that are online and accessible to your account.</p> <pre><code>all_online_backends = adapter.backends(online=True)\nprint(\"Available backends:\", all_online_backends)\n</code></pre>"},{"location":"user_guide/getting_started/#select-a-specific-backend","title":"Select a Specific Backend","text":"<p>Choose a backend by its identifier. Replace <code>&lt;resource-name&gt;</code> with the actual name of the backend.</p> <pre><code>backend = adapter.get_backend(\"&lt;resource-name&gt;\")\n# OR\n[backend] = adapter.backends(name=\"&lt;resource-name&gt;\")\n</code></pre>"},{"location":"user_guide/getting_started/#design-your-quantum-circuit","title":"Design Your Quantum Circuit","text":"<p>Construct your quantum circuit using Qiskit's <code>QuantumCircuit</code>. For example, create a circuit with 2 qubits and 2 classical bits.</p> <pre><code>circuit = QuantumCircuit(2, 2)\ncircuit.h(0)\ncircuit.cx(0, 1)\ncircuit.measure([0, 1], [0, 1])\n</code></pre>"},{"location":"user_guide/getting_started/#submit-your-job","title":"Submit Your Job","text":"<p>Submit the circuit for execution on the chosen backend. Specify the number of shots as required. Note that the circuit is transpiled automatically at server before it is submitted to the backend.</p> <pre><code>job = backend.run(circuit, shots=1000)\n</code></pre>"},{"location":"user_guide/getting_started/#transpile-circuit-and-submit-job","title":"Transpile Circuit and Submit Job","text":"<p>If you want to transpile the circuit yourself you can do it as follows and then submit it as a job with <code>no_modify=True</code> flag to skip transpilation at server side and submit the circuit as it is to the backend.</p> <p>The transpilation at user end may not be supported for some backends.</p> <pre><code>from qiskit import QuantumCircuit, compiler\ntranspiled_circuit = compiler.transpile(circuit, backend, optimization_level=3)\njob = backend.run(transpiled_circuit, shots=1000, no_modify=True)\n</code></pre>"},{"location":"user_guide/getting_started/#checking-the-number-of-pending-jobs-on-a-backend","title":"Checking the Number of Pending Jobs on a Backend","text":"<p>To determine if a backend is overloaded, you can check the number of pending jobs using the <code>num_pending_jobs</code> property.</p> <pre><code>print(\"Number of pending jobs:\", backend.num_pending_jobs)\n</code></pre>"},{"location":"user_guide/getting_started/#queuing-a-job-when-backend-is-offline","title":"Queuing a Job when Backend is Offline","text":"<p>By default, a job scheduled on a backend with an offline status will be cancelled. To queue a job on an offline backend, use the <code>queued=True</code> flag. This will ensure that the job is enqueued and will be executed once the backend becomes available.</p> <p>The job is queued for limited time and cancelled if the backend is still offline.</p> <pre><code>job = backend.run(circuit, shots=1000, queued=True)\n</code></pre>"},{"location":"user_guide/getting_started/#monitor-job-status","title":"Monitor Job Status","text":"<p>You can check the status of your job as follows. The status indicates the current stage (e.g., QUEUED, INITIALIZING, DONE).</p> <pre><code>status = job.status()\nprint(\"Job status:\", status)\n</code></pre>"},{"location":"user_guide/getting_started/#cancel-the-job","title":"Cancel the Job","text":"<p>If necessary, you cancel the job before it completes.</p> <pre><code>job.cancel()\n</code></pre>"},{"location":"user_guide/getting_started/#retrieve-and-display-results","title":"Retrieve and Display Results","text":"<p>Once the job is completed, fetch the results and display the measurement counts.</p> <pre><code>result = job.result()\ncounts = result.get_counts()\nprint(\"Measurement counts:\", counts)\n</code></pre>"},{"location":"user_guide/getting_started/#timestamps-for-job-execution","title":"Timestamps for Job Execution","text":"<pre><code>result_dict = job.result().to_dict()\nprint(result_dict[\"timestamps\"][\"submitted\"])\nprint(result_dict[\"timestamps\"][\"scheduled\"])\nprint(result_dict[\"timestamps\"][\"completed\"])\n</code></pre>"}]}